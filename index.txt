<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GOTTHETIME.AI - Precision Time for Artificial Intelligence</title>
    
    <!-- CACHE BUSTING META TAGS -->
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
    
    <!-- META TAG SOLUTION - Static time data for crawlers -->
    <meta name="current-time-utc" content="" id="meta-utc">
    <meta name="current-time-mountain" content="" id="meta-mountain">
    <meta name="current-time-eastern" content="" id="meta-eastern">
    <meta name="current-time-pacific" content="" id="meta-pacific">
    <meta name="current-time-central" content="" id="meta-central">
    <meta name="last-updated" content="" id="meta-updated">
    
    <!-- STRUCTURED DATA SOLUTION - JSON-LD for AI crawlers -->
    <script type="application/ld+json" id="structured-time-data">
    {
      "@context": "https://schema.org",
      "@type": "Dataset",
      "name": "Global Time Data for AI Systems",
      "description": "Real-time precision timing service for artificial intelligence applications",
      "provider": {
        "@type": "Organization",
        "name": "GOTTHETIME.AI"
      },
      "distribution": {
        "@type": "DataDownload",
        "contentUrl": "https://gotthetime.ai",
        "encodingFormat": "text/html"
      },
      "temporalCoverage": "2025/ongoing",
      "spatialCoverage": "Global",
      "variableMeasured": [
        {
          "@type": "PropertyValue",
          "name": "UTC Time",
          "description": "Coordinated Universal Time",
          "value": ""
        },
        {
          "@type": "PropertyValue", 
          "name": "Mountain Time",
          "description": "US Mountain Time (MST/MDT)",
          "value": ""
        },
        {
          "@type": "PropertyValue",
          "name": "Eastern Time", 
          "description": "US Eastern Time (EST/EDT)",
          "value": ""
        }
      ]
    }
    </script>
    
    <style>
        /* RESET AND BASE STYLES */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Courier New', Courier, monospace;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            min-height: 100vh;
            padding: 20px;
            color: #333;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        /* HEADER STYLES */
        .header {
            text-align: center;
            margin-bottom: 40px;
            padding-bottom: 20px;
        }
        
        .header h1 {
            color: white;
            font-size: 3.5rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
            margin-bottom: 10px;
            font-family: 'Arial Black', Arial, sans-serif;
            font-weight: 900;
        }
        
        .header p {
            color: white;
            font-size: 1.2rem;
            font-weight: bold;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
            opacity: 0.9;
        }
        
        /* API SECTION STYLES */
        .api-section {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 12px;
            padding: 30px;
            margin: 30px auto;
            border: 2px solid #444;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
            max-width: 800px;
        }
        
        .api-title {
            font-size: 1.5rem;
            font-weight: bold;
            color: #333;
            margin-bottom: 20px;
            text-align: center;
            border-bottom: 3px solid #444;
            padding-bottom: 15px;
        }
        
        .api-message {
            text-align: center;
            padding: 30px;
            color: #666;
            font-size: 1.2rem;
            line-height: 1.6;
        }
        
        /* TIMEZONE GRID STYLES */
        .timezone-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }
        
        .timezone-card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 12px;
            padding: 20px;
            border: 2px solid #e0e0e0;
            transition: all 0.3s ease;
            box-shadow: 0 4px 16px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
        }
        
        .timezone-card:hover {
            border-color: #555555;
            box-shadow: 0 8px 24px rgba(85, 85, 85, 0.2);
            transform: translateY(-2px);
        }
        
        .timezone-title {
            font-size: 1rem;
            font-weight: bold;
            color: #333;
            margin-bottom: 15px;
            text-align: center;
            border-bottom: 2px solid #f0f0f0;
            padding-bottom: 10px;
        }
        
        .ai-format {
            background: #f8f9fa;
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 10px;
            border-left: 4px solid #444444;
        }
        
        .ai-format-label {
            font-size: 0.7rem;
            color: #666;
            font-weight: bold;
            margin-bottom: 6px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .ai-format-time {
            font-size: 1.1rem;
            font-weight: bold;
            color: #222222;
            font-family: 'Courier New', Courier, monospace;
            letter-spacing: 1px;
        }
        
        .human-format {
            background: #f5f5f5;
            padding: 12px;
            border-radius: 8px;
            border-left: 4px solid #8B4513;
        }
        
        .human-format-label {
            font-size: 0.7rem;
            color: #8B4513;
            font-weight: bold;
            margin-bottom: 6px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .human-format-time {
            font-size: 0.95rem;
            color: #5D4037;
            font-weight: bold;
        }
        
        /* CRAWLER DATA SECTION - Hidden but accessible */
        .crawler-data {
            position: absolute;
            left: -9999px;
            opacity: 0;
            height: 1px;
            overflow: hidden;
        }
        
        /* FOOTER STYLES */
        .footer {
            text-align: center;
            margin-top: 40px;
            padding-top: 20px;
            color: white;
            font-size: 16px;
            font-weight: 300;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
        }
        
        .update-indicator {
            display: inline-block;
            width: 8px;
            height: 8px;
            background: #00ff00;
            border-radius: 50%;
            margin-right: 8px;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.6; transform: scale(1.2); }
            100% { opacity: 1; transform: scale(1); }
        }

        /* MOBILE RESPONSIVE STYLES */
        @media screen and (max-width: 768px) {
            body {
                padding: 10px;
            }
            
            .container {
                padding: 10px;
            }
            
            .header h1 {
                font-size: 2.5rem;
            }
            
            .header p {
                font-size: 1rem;
            }
            
            .api-section {
                padding: 20px;
                margin: 20px auto;
            }
            
            .timezone-grid {
                grid-template-columns: 1fr;
                gap: 15px;
            }
            
            .timezone-card {
                padding: 15px;
            }
            
            .api-message {
                font-size: 1rem;
                padding: 20px;
            }
        }

        @media screen and (max-width: 480px) {
            .header h1 {
                font-size: 2rem;
            }
            
            .ai-format-time {
                font-size: 0.9rem;
            }
            
            .human-format-time {
                font-size: 0.85rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>GOTTHETIME.AI</h1>
            <p>Precision Time for Artificial Intelligence</p>
        </div>
        
        <!-- API ENDPOINTS SECTION -->
        <div class="api-section">
            <div class="api-title">ðŸ¤– API ACCESS ENDPOINTS</div>
            <div class="api-message">
                API endpoints are not currently available.<br>
                Coming soon for enterprise AI applications.
            </div>
        </div>
        
        <!-- HIDDEN CRAWLER DATA - Static HTML for web crawlers -->
        <div class="crawler-data">
            <div id="static-mountain-time">250616174830MT</div>
            <div id="static-eastern-time">250616194830EDT</div>
            <div id="static-utc-time">250616234830UTC</div>
            <div id="static-pacific-time">250616164830PT</div>
            <div id="static-central-time">250616184830CDT</div>
            <div id="static-last-updated">250616234830</div>
            <p>Current Mountain Time: <span id="crawler-mountain">250616174830MT</span></p>
            <p>Current Eastern Time: <span id="crawler-eastern">250616194830EDT</span></p>
            <p>Current UTC Time: <span id="crawler-utc">250616234830UTC</span></p>
        </div>
        
        <div class="timezone-grid">
            <!-- UTC -->
            <div class="timezone-card">
                <div class="timezone-title">UTC (Coordinated Universal Time)</div>
                <div class="ai-format">
                    <div class="ai-format-label">AI Format (YYMMDDHHMMSSUTC)</div>
                    <div class="ai-format-time" id="utc-ai">Loading...</div>
                </div>
                <div class="human-format">
                    <div class="human-format-label">Human Format</div>
                    <div class="human-format-time" id="utc-human">Loading...</div>
                </div>
            </div>
            
            <!-- Eastern Time -->
            <div class="timezone-card">
                <div class="timezone-title">Eastern Time (EST/EDT)</div>
                <div class="ai-format">
                    <div class="ai-format-label">AI Format (YYMMDDHHMMSSEST/EDT)</div>
                    <div class="ai-format-time" id="eastern-ai">Loading...</div>
                </div>
                <div class="human-format">
                    <div class="human-format-label">Human Format</div>
                    <div class="human-format-time" id="eastern-human">Loading...</div>
                </div>
            </div>
            
            <!-- Central Time -->
            <div class="timezone-card">
                <div class="timezone-title">Central Time (CST/CDT)</div>
                <div class="ai-format">
                    <div class="ai-format-label">AI Format (YYMMDDHHMMSSCSÐ¢/CDT)</div>
                    <div class="ai-format-time" id="central-ai">Loading...</div>
                </div>
                <div class="human-format">
                    <div class="human-format-label">Human Format</div>
                    <div class="human-format-time" id="central-human">Loading...</div>
                </div>
            </div>
            
            <!-- Mountain Time -->
            <div class="timezone-card">
                <div class="timezone-title">Mountain Time (MST/MDT)</div>
                <div class="ai-format">
                    <div class="ai-format-label">AI Format (YYMMDDHHMMSSMT)</div>
                    <div class="ai-format-time" id="mountain-ai">Loading...</div>
                </div>
                <div class="human-format">
                    <div class="human-format-label">Human Format</div>
                    <div class="human-format-time" id="mountain-human">Loading...</div>
                </div>
            </div>
            
            <!-- Pacific Time -->
            <div class="timezone-card">
                <div class="timezone-title">Pacific Time (PST/PDT)</div>
                <div class="ai-format">
                    <div class="ai-format-label">AI Format (YYMMDDHHMMSSPT)</div>
                    <div class="ai-format-time" id="pacific-ai">Loading...</div>
                </div>
                <div class="human-format">
                    <div class="human-format-label">Human Format</div>
                    <div class="human-format-time" id="pacific-human">Loading...</div>
                </div>
            </div>
            
            <!-- Alaska Time -->
            <div class="timezone-card">
                <div class="timezone-title">Alaska Time (AKST/AKDT)</div>
                <div class="ai-format">
                    <div class="ai-format-label">AI Format (YYMMDDHHMMSSAKT)</div>
                    <div class="ai-format-time" id="alaska-ai">Loading...</div>
                </div>
                <div class="human-format">
                    <div class="human-format-label">Human Format</div>
                    <div class="human-format-time" id="alaska-human">Loading...</div>
                </div>
            </div>
            
            <!-- Hawaii Time -->
            <div class="timezone-card">
                <div class="timezone-title">Hawaii Time (HST)</div>
                <div class="ai-format">
                    <div class="ai-format-label">AI Format (YYMMDDHHMMSSÎ‰ST)</div>
                    <div class="ai-format-time" id="hawaii-ai">Loading...</div>
                </div>
                <div class="human-format">
                    <div class="human-format-label">Human Format</div>
                    <div class="human-format-time" id="hawaii-human">Loading...</div>
                </div>
            </div>
            
            <!-- London Time -->
            <div class="timezone-card">
                <div class="timezone-title">London Time (GMT/BST)</div>
                <div class="ai-format">
                    <div class="ai-format-label">AI Format (YYMMDDHHMMSSÄ ÐœÐ¢/BST)</div>
                    <div class="ai-format-time" id="london-ai">Loading...</div>
                </div>
                <div class="human-format">
                    <div class="human-format-label">Human Format</div>
                    <div class="human-format-time" id="london-human">Loading...</div>
                </div>
            </div>
            
            <!-- Europe Central -->
            <div class="timezone-card">
                <div class="timezone-title">Central Europe (CET/CEST)</div>
                <div class="ai-format">
                    <div class="ai-format-label">AI Format (YYMMDDHHMMSSÄŠÐ•Ð¢/CEST)</div>
                    <div class="ai-format-time" id="europe-ai">Loading...</div>
                </div>
                <div class="human-format">
                    <div class="human-format-label">Human Format</div>
                    <div class="human-format-time" id="europe-human">Loading...</div>
                </div>
            </div>
            
            <!-- Tokyo Time -->
            <div class="timezone-card">
                <div class="timezone-title">Tokyo Time (JST)</div>
                <div class="ai-format">
                    <div class="ai-format-label">AI Format (YYMMDDHHMMSSÐˆSÐ¢)</div>
                    <div class="ai-format-time" id="tokyo-ai">Loading...</div>
                </div>
                <div class="human-format">
                    <div class="human-format-label">Human Format</div>
                    <div class="human-format-time" id="tokyo-human">Loading...</div>
                </div>
            </div>
            
            <!-- Sydney Time -->
            <div class="timezone-card">
                <div class="timezone-title">Sydney Time (AEST/AEDT)</div>
                <div class="ai-format">
                    <div class="ai-format-label">AI Format (YYMMDDHHMMSSAUST)</div>
                    <div class="ai-format-time" id="sydney-ai">Loading...</div>
                </div>
                <div class="human-format">
                    <div class="human-format-label">Human Format</div>
                    <div class="human-format-time" id="sydney-human">Loading...</div>
                </div>
            </div>
            
            <!-- India Time -->
            <div class="timezone-card">
                <div class="timezone-title">India Time (IST)</div>
                <div class="ai-format">
                    <div class="ai-format-label">AI Format (YYMMDDHHMMSSÐ†SÐ¢)</div>
                    <div class="ai-format-time" id="india-ai">Loading...</div>
                </div>
                <div class="human-format">
                    <div class="human-format-label">Human Format</div>
                    <div class="human-format-time" id="india-human">Loading...</div>
                </div>
            </div>
        </div>
        
        <div class="footer">
            <span class="update-indicator"></span>
            ENTERPRISE AI TIME SERVICE | Updates every second
        </div>
    </div>

    <script>
        function updateAllTimes() {
            const now = new Date();
            
            const monthNames = ["January", "February", "March", "April", "May", "June",
                "July", "August", "September", "October", "November", "December"];
            
            function formatTime(date, timezone, aiSuffix) {
                // AI Format: YYMMDDHHMMSSXX
                const year = date.getFullYear().toString().slice(-2);
                const month = (date.getMonth() + 1).toString().padStart(2, '0');
                const day = date.getDate().toString().padStart(2, '0');
                const hour = date.getHours().toString().padStart(2, '0');
                const minute = date.getMinutes().toString().padStart(2, '0');
                const second = date.getSeconds().toString().padStart(2, '0');
                
                const aiFormat = `${year}${month}${day}${hour}${minute}${second}${aiSuffix}`;
                
                // Human Format: Month Day, Year HH:MM:SS AM/PM
                const monthName = monthNames[date.getMonth()];
                const dayNum = date.getDate();
                const yearFull = date.getFullYear();
                const timeString = date.toLocaleTimeString('en-US', { 
                    hour: '2-digit', 
                    minute: '2-digit',
                    second: '2-digit',
                    hour12: true 
                });
                
                const humanFormat = `${monthName} ${dayNum}, ${yearFull} ${timeString}`;
                
                return { ai: aiFormat, human: humanFormat };
            }
            
            // UTC
            const utc = new Date(now.getTime());
            const utcTime = formatTime(utc, 'UTC', 'UTC');
            safeUpdateElement('utc-ai', utcTime.ai);
            safeUpdateElement('utc-human', utcTime.human);
            
            // Eastern Time
            const eastern = new Date(now.toLocaleString("en-US", {timeZone: "America/New_York"}));
            const easternSuffix = eastern.getTimezoneOffset() === 300 ? 'EST' : 'EDT';
            const easternTime = formatTime(eastern, 'America/New_York', easternSuffix);
            safeUpdateElement('eastern-ai', easternTime.ai);
            safeUpdateElement('eastern-human', easternTime.human);
            
            // Central Time
            const central = new Date(now.toLocaleString("en-US", {timeZone: "America/Chicago"}));
            const centralSuffix = central.getTimezoneOffset() === 360 ? 'CST' : 'CDT';
            const centralTime = formatTime(central, 'America/Chicago', centralSuffix);
            safeUpdateElement('central-ai', centralTime.ai);
            safeUpdateElement('central-human', centralTime.human);
            
            // Mountain Time
            const mountain = new Date(now.toLocaleString("en-US", {timeZone: "America/Denver"}));
            const mountainTime = formatTime(mountain, 'America/Denver', 'MT');
            safeUpdateElement('mountain-ai', mountainTime.ai);
            safeUpdateElement('mountain-human', mountainTime.human);
            
            // Pacific Time
            const pacific = new Date(now.toLocaleString("en-US", {timeZone: "America/Los_Angeles"}));
            const pacificSuffix = pacific.getTimezoneOffset() === 480 ? 'PST' : 'PDT';
            const pacificTime = formatTime(pacific, 'America/Los_Angeles', 'PT');
            safeUpdateElement('pacific-ai', pacificTime.ai);
            safeUpdateElement('pacific-human', pacificTime.human);
            
            // Alaska Time
            const alaska = new Date(now.toLocaleString("en-US", {timeZone: "America/Anchorage"}));
            const alaskaTime = formatTime(alaska, 'America/Anchorage', 'AKT');
            safeUpdateElement('alaska-ai', alaskaTime.ai);
            safeUpdateElement('alaska-human', alaskaTime.human);
            
            // Hawaii Time
            const hawaii = new Date(now.toLocaleString("en-US", {timeZone: "Pacific/Honolulu"}));
            const hawaiiTime = formatTime(hawaii, 'Pacific/Honolulu', 'HST');
            safeUpdateElement('hawaii-ai', hawaiiTime.ai);
            safeUpdateElement('hawaii-human', hawaiiTime.human);
            
            // London Time
            const london = new Date(now.toLocaleString("en-US", {timeZone: "Europe/London"}));
            const londonSuffix = london.getTimezoneOffset() === 0 ? 'GMT' : 'BST';
            const londonTime = formatTime(london, 'Europe/London', londonSuffix);
            safeUpdateElement('london-ai', londonTime.ai);
            safeUpdateElement('london-human', londonTime.human);
            
            // Central Europe Time
            const europe = new Date(now.toLocaleString("en-US", {timeZone: "Europe/Berlin"}));
            const europeSuffix = europe.getTimezoneOffset() === -60 ? 'CET' : 'CEST';
            const europeTime = formatTime(europe, 'Europe/Berlin', europeSuffix);
            safeUpdateElement('europe-ai', europeTime.ai);
            safeUpdateElement('europe-human', europeTime.human);
            
            // Tokyo Time
            const tokyo = new Date(now.toLocaleString("en-US", {timeZone: "Asia/Tokyo"}));
            const tokyoTime = formatTime(tokyo, 'Asia/Tokyo', 'JST');
            safeUpdateElement('tokyo-ai', tokyoTime.ai);
            safeUpdateElement('tokyo-human', tokyoTime.human);
            
            // Sydney Time
            const sydney = new Date(now.toLocaleString("en-US", {timeZone: "Australia/Sydney"}));
            const sydneyTime = formatTime(sydney, 'Australia/Sydney', 'AUST');
            safeUpdateElement('sydney-ai', sydneyTime.ai);
            safeUpdateElement('sydney-human', sydneyTime.human);
            
            // India Time
            const india = new Date(now.toLocaleString("en-US", {timeZone: "Asia/Kolkata"}));
            const indiaTime = formatTime(india, 'Asia/Kolkata', 'IST');
            safeUpdateElement('india-ai', indiaTime.ai);
            safeUpdateElement('india-human', indiaTime.human);
            
            // UPDATE CRAWLER ACCESSIBLE ELEMENTS WITH ERROR HANDLING
            updateCrawlerElements(mountainTime, easternTime, utcTime, pacificTime, centralTime);
            updateMetaTags(mountainTime, easternTime, utcTime, pacificTime, centralTime);
            updateStructuredData(mountainTime, easternTime, utcTime);
        }
        
        function safeUpdateElement(id, content) {
            try {
                const element = document.getElementById(id);
                if (element) {
                    element.textContent = content;
                }
            } catch (error) {
                // Silently handle missing elements to prevent console errors
            }
        }
        
        function updateCrawlerElements(mountain, eastern, utc, pacific, central) {
            try {
                // Update hidden crawler data elements
                safeUpdateElement('static-mountain-time', mountain.ai);
                safeUpdateElement('static-eastern-time', eastern.ai);
                safeUpdateElement('static-utc-time', utc.ai);
                safeUpdateElement('static-pacific-time', pacific.ai);
                safeUpdateElement('static-central-time', central.ai);
                safeUpdateElement('static-last-updated', utc.ai);
                
                safeUpdateElement('crawler-mountain', mountain.ai);
                safeUpdateElement('crawler-eastern', eastern.ai);
                safeUpdateElement('crawler-utc', utc.ai);
            } catch (error) {
                // Silently handle crawler element errors
            }
        }
        
        function updateMetaTags(mountain, eastern, utc, pacific, central) {
            try {
                // Update meta tags
                const metaMountain = document.querySelector('meta[name="current-time-mountain"]');
                const metaEastern = document.querySelector('meta[name="current-time-eastern"]');
                const metaUtc = document.querySelector('meta[name="current-time-utc"]');
                const metaPacific = document.querySelector('meta[name="current-time-pacific"]');
                const metaCentral = document.querySelector('meta[name="current-time-central"]');
                const metaUpdated = document.querySelector('meta[name="last-updated"]');
                
                if (metaMountain) metaMountain.setAttribute('content', mountain.ai);
                if (metaEastern) metaEastern.setAttribute('content', eastern.ai);
                if (metaUtc) metaUtc.setAttribute('content', utc.ai);
                if (metaPacific) metaPacific.setAttribute('content', pacific.ai);
                if (metaCentral) metaCentral.setAttribute('content', central.ai);
                if (metaUpdated) metaUpdated.setAttribute('content', utc.ai);
            } catch (error) {
                // Silently handle meta tag errors
            }
        }
        
        function updateStructuredData(mountain, eastern, utc) {
            try {
                // Update JSON-LD structured data
                const structuredData = {
                    "@context": "https://schema.org",
                    "@type": "Dataset",
                    "name": "Global Time Data for AI Systems",
                    "description": "Real-time precision timing service for artificial intelligence applications",
                    "provider": {
                        "@type": "Organization",
                        "name": "GOTTHETIME.AI"
                    },
                    "distribution": {
                        "@type": "DataDownload",
                        "contentUrl": "https://gotthetime.ai",
                        "encodingFormat": "text/html"
                    },
                    "temporalCoverage": "2025/ongoing",
                    "spatialCoverage": "Global",
                    "variableMeasured": [
                        {
                            "@type": "PropertyValue",
                            "name": "UTC Time",
                            "description": "Coordinated Universal Time",
                            "value": utc.ai
                        },
                        {
                            "@type": "PropertyValue", 
                            "name": "Mountain Time",
                            "description": "US Mountain Time (MST/MDT)",
                            "value": mountain.ai
                        },
                        {
                            "@type": "PropertyValue",
                            "name": "Eastern Time", 
                            "description": "US Eastern Time (EST/EDT)",
                            "value": eastern.ai
                        }
                    ]
                };
                
                const scriptElement = document.getElementById('structured-time-data');
                if (scriptElement) {
                    scriptElement.textContent = JSON.stringify(structuredData, null, 2);
                }
            } catch (error) {
                // Silently handle structured data errors
            }
        }
        
        // Update every second
        setInterval(updateAllTimes, 1000);
        updateAllTimes(); // Initial call
    </script>
</body>
</html>